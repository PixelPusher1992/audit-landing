//font
@mixin font($f-color: $black, $f-size: $font-size-base) {
  color: $f-color;
  font-size: $f-size;
}

//paddings & margins
@mixin padding-vertical($pt, $pb: $pt) {
  padding-top: $pt;
  padding-bottom: $pb;
}
@mixin padding-horizontal($pl, $pr: $pl) {
  padding-left: $pl;
  padding-right: $pr;
}
@mixin margin-vertical($mt, $mb: $mt) {
  margin-top: $mt;
  margin-bottom: $mb;
}
@mixin margin-horizontal($ml, $mr: $ml) {
  margin-left: $ml;
  margin-right: $mr;
}

//vertical centering
@mixin vertical-center($align: middle) {
  display: inline-block;
  vertical-align: $align;
}

//focus, hover & active states
@mixin hover-state {
  &:hover {
    @content;
  }
}
@mixin active-state {
  &.active,
  &:active {
    @content;
  }
}
@mixin focus-state {
  &:focus {
    @content;
  }
}
@mixin hover-focus-active-state {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}

//absolute location for element
@mixin chooseCoords($coords) {
  $topVal: nth($coords, 1);
  $rightVal: nth($coords, 2);
  $bottomVal: nth($coords, 3);
  $leftVal: nth($coords, 4);
  @if type-of($topVal) == number {
    top: $topVal;
  }
  @if type-of($rightVal) == number {
    right: $rightVal;
  }
  @if type-of($bottomVal) == number {
    bottom: $bottomVal;
  }
  @if type-of($leftVal) == number {
    left: $leftVal;
  }
}

@mixin absoluteLocation($coords) {
  position: absolute;
  @include chooseCoords($coords);
}

//responsive image
@mixin responsive-image($height) {
  text-align: center;
  display: block;
  height: $height;
  line-height: $height;
  img {
    max-height: $height;
    max-width: 100%;
    height: auto;
    @include vertical-center;
  }
}

@mixin triangle($direction, $color, $size) {
  content: '';
  @include square(0);
  border-#{$direction}: $size solid $color;

  @if ($direction == top or $direction == bottom) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  } @else if ($direction == left or $direction == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
  }
}

@mixin shadow() {
  box-shadow: 0 0 16px rgba(0, 0, 0, .26);
}

@mixin input($bg, $color, $border, $input-height, $padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
  background: $bg;
  color: $color;
  border: $border;
  height: $input-height;
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  line-height: $line-height;
  border-radius: $border-radius;
}

/* Shadow mixin ------------------------------------------------------- */
@function pi() {
  @return 3.14159265359;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}
@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}
@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}
@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}
@mixin shade($type, $color: #3498db, $depth: 20, $angle: 135deg, $long: false, $fade: false) {
  $angle: ($angle - 90);
  $x: 1.5 * cos($angle) + 0px;
  $y: 1.5 * sin($angle) + 0px;
  $darken: (lightness($color)/$depth)/2;
  $opacify: 0;
  $shadow: ();

  @if $long == true{
    $darken:0;
  }

  @if $fade == true {
    $opacify: (opacity($color)/$depth) ;
    // added this for rendering in some browsers, remove if you like.
    @include translateZ(0);
  }

  @for $i from 1 through $depth {
    $shadow: $shadow, $i*$x $i*$y 0 hsla(hue($color) , saturation($color), (lightness($color) - ($i * $darken)), 1 - ($i * $opacify));
  }
  #{$type}-shadow: $shadow;
}

@mixin epages-btn($pv: 0.5em, $ph: 0.5em, $font-size: $my-base-font-size) {
  background: $brand-primary;
  color: $white;
  border: 0;
  display: inline-block;
  overflow: hidden;
  text-transform: uppercase;
  font-family: $font-family-content;
  transition: background $time-animation,
              box-shadow $time-animation,
              text-shadow 0s;
  @include shadow;
  @include button-size($pv, $ph, $font-size, 1, 0);
  @include shade(text, $brand-primary-dark, 50, 135deg, true, false);
  @include hover-focus-active-state {
    color: $white;
    outline: 0;
    text-decoration: none;
  }
  @include hover-state {
    background: $brand-primary-dark;
    transition: text-shadow 0s,
                background $time-animation;
  }
  @include active-state {
    box-shadow: inset 0 0 11px rgba(0, 0, 0, 0.75);
    transition: text-shadow 0s;
    text-shadow: none;
  }
}